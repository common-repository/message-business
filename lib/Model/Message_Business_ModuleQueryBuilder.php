<?php
/**
 * Message_Business_ModuleQueryBuilder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Message_Business_ModuleQueryBuilder Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_ModuleQueryBuilder implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Message_Business_ModuleQueryBuilder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'operation_id' => 'int',
        'is_suspended' => 'bool',
        'last_run_date' => 'string',
        'module_name' => 'string',
        'type' => 'string',
        'table_name' => 'string',
        'operation_type' => 'string',
        'method_type' => 'string',
        'mod_field_mb' => 'map[string,\Swagger\Client\Model\Message_Business_ModuleFieldMatching]',
        'mod_unicity_field' => 'string',
        'mb_unicity_field' => 'string',
        'filters_build' => '\Swagger\Client\Model\Message_Business_ConditionFilter[]',
        'filter_string' => '\Swagger\Client\Model\Message_Business_ConditionString'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'operation_id' => 'operationId',
        'is_suspended' => 'isSuspended',
        'last_run_date' => 'lastRunDate',
        'module_name' => 'module_name',
        'type' => 'type',
        'table_name' => 'TableName',
        'operation_type' => 'operationType',
        'method_type' => 'methodType',
        'mod_field_mb' => 'modFieldMb',
        'mod_unicity_field' => 'modUnicityField',
        'mb_unicity_field' => 'mbUnicityField',
        'filters_build' => 'filters_build',
        'filter_string' => 'filter_string'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'operation_id' => 'setOperationId',
        'is_suspended' => 'setIsSuspended',
        'last_run_date' => 'setLastRunDate',
        'module_name' => 'setModuleName',
        'type' => 'setType',
        'table_name' => 'setTableName',
        'operation_type' => 'setOperationType',
        'method_type' => 'setMethodType',
        'mod_field_mb' => 'setModFieldMb',
        'mod_unicity_field' => 'setModUnicityField',
        'mb_unicity_field' => 'setMbUnicityField',
        'filters_build' => 'setFiltersBuild',
        'filter_string' => 'setFilterString'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'operation_id' => 'getOperationId',
        'is_suspended' => 'getIsSuspended',
        'last_run_date' => 'getLastRunDate',
        'module_name' => 'getModuleName',
        'type' => 'getType',
        'table_name' => 'getTableName',
        'operation_type' => 'getOperationType',
        'method_type' => 'getMethodType',
        'mod_field_mb' => 'getModFieldMb',
        'mod_unicity_field' => 'getModUnicityField',
        'mb_unicity_field' => 'getMbUnicityField',
        'filters_build' => 'getFiltersBuild',
        'filter_string' => 'getFilterString'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation_id'] = isset($data['operation_id']) ? $data['operation_id'] : null;
        $this->container['is_suspended'] = isset($data['is_suspended']) ? $data['is_suspended'] : null;
        $this->container['last_run_date'] = isset($data['last_run_date']) ? $data['last_run_date'] : null;
        $this->container['module_name'] = isset($data['module_name']) ? $data['module_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['table_name'] = isset($data['table_name']) ? $data['table_name'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['method_type'] = isset($data['method_type']) ? $data['method_type'] : null;
        $this->container['mod_field_mb'] = isset($data['mod_field_mb']) ? $data['mod_field_mb'] : null;
        $this->container['mod_unicity_field'] = isset($data['mod_unicity_field']) ? $data['mod_unicity_field'] : null;
        $this->container['mb_unicity_field'] = isset($data['mb_unicity_field']) ? $data['mb_unicity_field'] : null;
        $this->container['filters_build'] = isset($data['filters_build']) ? $data['filters_build'] : null;
        $this->container['filter_string'] = isset($data['filter_string']) ? $data['filter_string'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets operation_id
     * @return int
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     * @param int $operation_id
     * @return $this
     */
    public function setOperationId($operation_id)
    {
        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets is_suspended
     * @return bool
     */
    public function getIsSuspended()
    {
        return $this->container['is_suspended'];
    }

    /**
     * Sets is_suspended
     * @param bool $is_suspended
     * @return $this
     */
    public function setIsSuspended($is_suspended)
    {
        $this->container['is_suspended'] = $is_suspended;

        return $this;
    }

    /**
     * Gets last_run_date
     * @return string
     */
    public function getLastRunDate()
    {
        return $this->container['last_run_date'];
    }

    /**
     * Sets last_run_date
     * @param string $last_run_date
     * @return $this
     */
    public function setLastRunDate($last_run_date)
    {
        $this->container['last_run_date'] = $last_run_date;

        return $this;
    }

    /**
     * Gets module_name
     * @return string
     */
    public function getModuleName()
    {
        return $this->container['module_name'];
    }

    /**
     * Sets module_name
     * @param string $module_name
     * @return $this
     */
    public function setModuleName($module_name)
    {
        $this->container['module_name'] = $module_name;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets table_name
     * @return string
     */
    public function getTableName()
    {
        return $this->container['table_name'];
    }

    /**
     * Sets table_name
     * @param string $table_name
     * @return $this
     */
    public function setTableName($table_name)
    {
        $this->container['table_name'] = $table_name;

        return $this;
    }

    /**
     * Gets operation_type
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     * @param string $operation_type
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets method_type
     * @return string
     */
    public function getMethodType()
    {
        return $this->container['method_type'];
    }

    /**
     * Sets method_type
     * @param string $method_type
     * @return $this
     */
    public function setMethodType($method_type)
    {
        $this->container['method_type'] = $method_type;

        return $this;
    }

    /**
     * Gets mod_field_mb
     * @return map[string,\Swagger\Client\Model\Message_Business_ModuleFieldMatching]
     */
    public function getModFieldMb()
    {
        return $this->container['mod_field_mb'];
    }

    /**
     * Sets mod_field_mb
     * @param map[string,\Swagger\Client\Model\Message_Business_ModuleFieldMatching] $mod_field_mb
     * @return $this
     */
    public function setModFieldMb($mod_field_mb)
    {
        $this->container['mod_field_mb'] = $mod_field_mb;

        return $this;
    }

    /**
     * Gets mod_unicity_field
     * @return string
     */
    public function getModUnicityField()
    {
        return $this->container['mod_unicity_field'];
    }

    /**
     * Sets mod_unicity_field
     * @param string $mod_unicity_field
     * @return $this
     */
    public function setModUnicityField($mod_unicity_field)
    {
        $this->container['mod_unicity_field'] = $mod_unicity_field;

        return $this;
    }

    /**
     * Gets mb_unicity_field
     * @return string
     */
    public function getMbUnicityField()
    {
        return $this->container['mb_unicity_field'];
    }

    /**
     * Sets mb_unicity_field
     * @param string $mb_unicity_field
     * @return $this
     */
    public function setMbUnicityField($mb_unicity_field)
    {
        $this->container['mb_unicity_field'] = $mb_unicity_field;

        return $this;
    }

    /**
     * Gets filters_build
     * @return \Swagger\Client\Model\Message_Business_ConditionFilter[]
     */
    public function getFiltersBuild()
    {
        return $this->container['filters_build'];
    }

    /**
     * Sets filters_build
     * @param \Swagger\Client\Model\Message_Business_ConditionFilter[] $filters_build
     * @return $this
     */
    public function setFiltersBuild($filters_build)
    {
        $this->container['filters_build'] = $filters_build;

        return $this;
    }

    /**
     * Gets filter_string
     * @return \Swagger\Client\Model\Message_Business_ConditionString
     */
    public function getFilterString()
    {
        return $this->container['filter_string'];
    }

    /**
     * Sets filter_string
     * @param \Swagger\Client\Model\Message_Business_ConditionString $filter_string
     * @return $this
     */
    public function setFilterString($filter_string)
    {
        $this->container['filter_string'] = $filter_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\Message_Business_ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\Message_Business_ObjectSerializer::sanitizeForSerialization($this));
    }
}


