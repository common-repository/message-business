<?php
/**
 * Message_Business_EmailingOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Message_Business_EmailingOperation Class Doc Comment
 *
 * @category    Class */
 // @description Email operation
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_EmailingOperation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Message_Business_EmailingOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'culture' => 'string',
        'status' => 'string',
        'name' => 'string',
        'description' => 'string',
        'date' => 'string',
        'subject' => 'string',
        'from_name' => 'string',
        'from_mail' => 'string',
        'reply_to' => 'string',
        'html_editor' => 'string',
        'html' => 'string',
        'text' => 'string',
        'report_link' => 'string',
        'receivers' => '\Swagger\Client\Model\Message_Business_ReceiversOperation',
        'schedule' => '\Swagger\Client\Model\Message_Business_ScheduleOperation',
        'options' => '\Swagger\Client\Model\Message_Business_EmailingOption'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'culture' => 'culture',
        'status' => 'status',
        'name' => 'name',
        'description' => 'description',
        'date' => 'date',
        'subject' => 'subject',
        'from_name' => 'fromName',
        'from_mail' => 'fromMail',
        'reply_to' => 'replyTo',
        'html_editor' => 'htmlEditor',
        'html' => 'html',
        'text' => 'text',
        'report_link' => 'reportLink',
        'receivers' => 'receivers',
        'schedule' => 'schedule',
        'options' => 'options'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'culture' => 'setCulture',
        'status' => 'setStatus',
        'name' => 'setName',
        'description' => 'setDescription',
        'date' => 'setDate',
        'subject' => 'setSubject',
        'from_name' => 'setFromName',
        'from_mail' => 'setFromMail',
        'reply_to' => 'setReplyTo',
        'html_editor' => 'setHtmlEditor',
        'html' => 'setHtml',
        'text' => 'setText',
        'report_link' => 'setReportLink',
        'receivers' => 'setReceivers',
        'schedule' => 'setSchedule',
        'options' => 'setOptions'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'culture' => 'getCulture',
        'status' => 'getStatus',
        'name' => 'getName',
        'description' => 'getDescription',
        'date' => 'getDate',
        'subject' => 'getSubject',
        'from_name' => 'getFromName',
        'from_mail' => 'getFromMail',
        'reply_to' => 'getReplyTo',
        'html_editor' => 'getHtmlEditor',
        'html' => 'getHtml',
        'text' => 'getText',
        'report_link' => 'getReportLink',
        'receivers' => 'getReceivers',
        'schedule' => 'getSchedule',
        'options' => 'getOptions'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['from_name'] = isset($data['from_name']) ? $data['from_name'] : null;
        $this->container['from_mail'] = isset($data['from_mail']) ? $data['from_mail'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['html_editor'] = isset($data['html_editor']) ? $data['html_editor'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['report_link'] = isset($data['report_link']) ? $data['report_link'] : null;
        $this->container['receivers'] = isset($data['receivers']) ? $data['receivers'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalid_properties[] = "'subject' can't be null";
        }
        if ($this->container['reply_to'] === null) {
            $invalid_properties[] = "'reply_to' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['subject'] === null) {
            return false;
        }
        if ($this->container['reply_to'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Operation number
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets culture
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     * @param string $culture Language and localisation ex fr-FR
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Operation status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Operation name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Operation description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param string $date Operation start date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject Email subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets from_name
     * @return string
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     * @param string $from_name Name displayed for the email
     * @return $this
     */
    public function setFromName($from_name)
    {
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets from_mail
     * @return string
     */
    public function getFromMail()
    {
        return $this->container['from_mail'];
    }

    /**
     * Sets from_mail
     * @param string $from_mail Mail used to send the email
     * @return $this
     */
    public function setFromMail($from_mail)
    {
        $this->container['from_mail'] = $from_mail;

        return $this;
    }

    /**
     * Gets reply_to
     * @return string
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     * @param string $reply_to Mail address you want the receiver to reply to
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets html_editor
     * @return string
     */
    public function getHtmlEditor()
    {
        return $this->container['html_editor'];
    }

    /**
     * Sets html_editor
     * @param string $html_editor Message content Html format to be edited in the MB editor
     * @return $this
     */
    public function setHtmlEditor($html_editor)
    {
        $this->container['html_editor'] = $html_editor;

        return $this;
    }

    /**
     * Gets html
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     * @param string $html Message content Html format
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text Message content TXT format
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets report_link
     * @return string
     */
    public function getReportLink()
    {
        return $this->container['report_link'];
    }

    /**
     * Sets report_link
     * @param string $report_link Url of the report
     * @return $this
     */
    public function setReportLink($report_link)
    {
        $this->container['report_link'] = $report_link;

        return $this;
    }

    /**
     * Gets receivers
     * @return \Swagger\Client\Model\Message_Business_ReceiversOperation
     */
    public function getReceivers()
    {
        return $this->container['receivers'];
    }

    /**
     * Sets receivers
     * @param \Swagger\Client\Model\Message_Business_ReceiversOperation $receivers
     * @return $this
     */
    public function setReceivers($receivers)
    {
        $this->container['receivers'] = $receivers;

        return $this;
    }

    /**
     * Gets schedule
     * @return \Swagger\Client\Model\Message_Business_ScheduleOperation
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     * @param \Swagger\Client\Model\Message_Business_ScheduleOperation $schedule
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets options
     * @return \Swagger\Client\Model\Message_Business_EmailingOption
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \Swagger\Client\Model\Message_Business_EmailingOption $options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\Message_Business_ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\Message_Business_ObjectSerializer::sanitizeForSerialization($this));
    }
}


