<?php
/**
 * Message_Business_ImportOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Message_Business_ImportOperation Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_ImportOperation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Message_Business_ImportOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'start_date' => 'string',
        'status' => 'string',
        'link' => 'string',
        'line_read' => 'int',
        'line_duplicate' => 'int',
        'line_add' => 'int',
        'line_update' => 'int',
        'line_import' => 'int',
        'line_error' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'Id',
        'name' => 'Name',
        'start_date' => 'StartDate',
        'status' => 'Status',
        'link' => 'Link',
        'line_read' => 'LineRead',
        'line_duplicate' => 'LineDuplicate',
        'line_add' => 'LineAdd',
        'line_update' => 'LineUpdate',
        'line_import' => 'LineImport',
        'line_error' => 'LineError'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'link' => 'setLink',
        'line_read' => 'setLineRead',
        'line_duplicate' => 'setLineDuplicate',
        'line_add' => 'setLineAdd',
        'line_update' => 'setLineUpdate',
        'line_import' => 'setLineImport',
        'line_error' => 'setLineError'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'link' => 'getLink',
        'line_read' => 'getLineRead',
        'line_duplicate' => 'getLineDuplicate',
        'line_add' => 'getLineAdd',
        'line_update' => 'getLineUpdate',
        'line_import' => 'getLineImport',
        'line_error' => 'getLineError'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['line_read'] = isset($data['line_read']) ? $data['line_read'] : null;
        $this->container['line_duplicate'] = isset($data['line_duplicate']) ? $data['line_duplicate'] : null;
        $this->container['line_add'] = isset($data['line_add']) ? $data['line_add'] : null;
        $this->container['line_update'] = isset($data['line_update']) ? $data['line_update'] : null;
        $this->container['line_import'] = isset($data['line_import']) ? $data['line_import'] : null;
        $this->container['line_error'] = isset($data['line_error']) ? $data['line_error'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_date
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param string $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     * @param string $link
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets line_read
     * @return int
     */
    public function getLineRead()
    {
        return $this->container['line_read'];
    }

    /**
     * Sets line_read
     * @param int $line_read
     * @return $this
     */
    public function setLineRead($line_read)
    {
        $this->container['line_read'] = $line_read;

        return $this;
    }

    /**
     * Gets line_duplicate
     * @return int
     */
    public function getLineDuplicate()
    {
        return $this->container['line_duplicate'];
    }

    /**
     * Sets line_duplicate
     * @param int $line_duplicate
     * @return $this
     */
    public function setLineDuplicate($line_duplicate)
    {
        $this->container['line_duplicate'] = $line_duplicate;

        return $this;
    }

    /**
     * Gets line_add
     * @return int
     */
    public function getLineAdd()
    {
        return $this->container['line_add'];
    }

    /**
     * Sets line_add
     * @param int $line_add
     * @return $this
     */
    public function setLineAdd($line_add)
    {
        $this->container['line_add'] = $line_add;

        return $this;
    }

    /**
     * Gets line_update
     * @return int
     */
    public function getLineUpdate()
    {
        return $this->container['line_update'];
    }

    /**
     * Sets line_update
     * @param int $line_update
     * @return $this
     */
    public function setLineUpdate($line_update)
    {
        $this->container['line_update'] = $line_update;

        return $this;
    }

    /**
     * Gets line_import
     * @return int
     */
    public function getLineImport()
    {
        return $this->container['line_import'];
    }

    /**
     * Sets line_import
     * @param int $line_import
     * @return $this
     */
    public function setLineImport($line_import)
    {
        $this->container['line_import'] = $line_import;

        return $this;
    }

    /**
     * Gets line_error
     * @return int
     */
    public function getLineError()
    {
        return $this->container['line_error'];
    }

    /**
     * Sets line_error
     * @param int $line_error
     * @return $this
     */
    public function setLineError($line_error)
    {
        $this->container['line_error'] = $line_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\Message_Business_ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\Message_Business_ObjectSerializer::sanitizeForSerialization($this));
    }
}


