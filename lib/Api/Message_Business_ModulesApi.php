<?php
/**
 * Message_Business_ModulesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Message_Business_Configuration;
use \Swagger\Client\Message_Business_ApiClient;
use \Swagger\Client\Message_Business_ApiException;
use \Swagger\Client\Message_Business_ObjectSerializer;

/**
 * Message_Business_ModulesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_ModulesApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\Message_Business_ApiClient instance of the Message_Business_ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\Message_Business_ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\Message_Business_ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new Message_Business_ApiClient();
            $apiClient->getConfig()->setHost('https://services.message-business.com/api/rest/v4');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\Message_Business_ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\Message_Business_ApiClient $apiClient set the API client
     *
     * @return Message_Business_ModulesApi
     */
    public function setApiClient(\Swagger\Client\Message_Business_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation modulesDeleteModuleParams
     *
     * Remove the parameters for a specific module.  Currently only prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesDeleteModuleParams($module)
    {
        list($response) = $this->modulesDeleteModuleParamsWithHttpInfo($module);
        return $response;
    }

    /**
     * Operation modulesDeleteModuleParamsWithHttpInfo
     *
     * Remove the parameters for a specific module.  Currently only prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesDeleteModuleParamsWithHttpInfo($module)
    {
        // verify the required parameter 'module' is set
        if ($module === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module when calling modulesDeleteModuleParams');
        }
        // parse inputs
        $resourcePath = "/modules/params/{module}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($module !== null) {
            $resourcePath = str_replace(
                "{" . "module" . "}",
                $this->apiClient->getSerializer()->toPathValue($module),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/params/{module}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesDeleteOperationLogId
     *
     * Remove an operation log.  Currently only ftp is available.
     *
     * @param string $type The module type (required)
     * @param int $id The module id (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesDeleteOperationLogId($type, $id)
    {
        list($response) = $this->modulesDeleteOperationLogIdWithHttpInfo($type, $id);
        return $response;
    }

    /**
     * Operation modulesDeleteOperationLogIdWithHttpInfo
     *
     * Remove an operation log.  Currently only ftp is available.
     *
     * @param string $type The module type (required)
     * @param int $id The module id (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesDeleteOperationLogIdWithHttpInfo($type, $id)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling modulesDeleteOperationLogId');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesDeleteOperationLogId');
        }
        // parse inputs
        $resourcePath = "/modules/exportlog/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/exportlog/{type}/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesDeleteSingleModuleOperation
     *
     * Delete an operation
     *
     * @param int $id  (required)
     * @return object
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesDeleteSingleModuleOperation($id)
    {
        list($response) = $this->modulesDeleteSingleModuleOperationWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation modulesDeleteSingleModuleOperationWithHttpInfo
     *
     * Delete an operation
     *
     * @param int $id  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesDeleteSingleModuleOperationWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesDeleteSingleModuleOperation');
        }
        // parse inputs
        $resourcePath = "/modules/operation/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/modules/operation/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesGetConnectionTest
     *
     * Check the api connection
     *
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetConnectionTest()
    {
        list($response) = $this->modulesGetConnectionTestWithHttpInfo();
        return $response;
    }

    /**
     * Operation modulesGetConnectionTestWithHttpInfo
     *
     * Check the api connection
     *
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetConnectionTestWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/modules/connection/test";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/connection/test'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesGetModuleOperation
     *
     * Get the operation module object for a specific module.  Currently only prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @param int $id The operation id (required)
     * @return \Swagger\Client\Model\Message_Business_ModuleQueryBuilder
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetModuleOperation($module, $id)
    {
        list($response) = $this->modulesGetModuleOperationWithHttpInfo($module, $id);
        return $response;
    }

    /**
     * Operation modulesGetModuleOperationWithHttpInfo
     *
     * Get the operation module object for a specific module.  Currently only prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @param int $id The operation id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ModuleQueryBuilder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetModuleOperationWithHttpInfo($module, $id)
    {
        // verify the required parameter 'module' is set
        if ($module === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module when calling modulesGetModuleOperation');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesGetModuleOperation');
        }
        // parse inputs
        $resourcePath = "/modules/operation/{module}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($module !== null) {
            $resourcePath = str_replace(
                "{" . "module" . "}",
                $this->apiClient->getSerializer()->toPathValue($module),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ModuleQueryBuilder',
                '/modules/operation/{module}/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ModuleQueryBuilder', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ModuleQueryBuilder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesGetModuleOperations
     *
     * Get a list of operations for the export module.  Currently only prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @return \Swagger\Client\Model\Message_Business_ModuleQueryBuilder[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetModuleOperations($module)
    {
        list($response) = $this->modulesGetModuleOperationsWithHttpInfo($module);
        return $response;
    }

    /**
     * Operation modulesGetModuleOperationsWithHttpInfo
     *
     * Get a list of operations for the export module.  Currently only prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ModuleQueryBuilder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetModuleOperationsWithHttpInfo($module)
    {
        // verify the required parameter 'module' is set
        if ($module === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module when calling modulesGetModuleOperations');
        }
        // parse inputs
        $resourcePath = "/modules/operations/{module}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($module !== null) {
            $resourcePath = str_replace(
                "{" . "module" . "}",
                $this->apiClient->getSerializer()->toPathValue($module),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ModuleQueryBuilder[]',
                '/modules/operations/{module}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ModuleQueryBuilder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ModuleQueryBuilder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesGetModuleParams
     *
     * Get the parameters for a specific module.  Currently only logftp, prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @return \Swagger\Client\Model\Message_Business_ModulesParameters
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetModuleParams($module)
    {
        list($response) = $this->modulesGetModuleParamsWithHttpInfo($module);
        return $response;
    }

    /**
     * Operation modulesGetModuleParamsWithHttpInfo
     *
     * Get the parameters for a specific module.  Currently only logftp, prestashop, magento and woocommerce are available.
     *
     * @param string $module The module name (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ModulesParameters, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetModuleParamsWithHttpInfo($module)
    {
        // verify the required parameter 'module' is set
        if ($module === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module when calling modulesGetModuleParams');
        }
        // parse inputs
        $resourcePath = "/modules/params/{module}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($module !== null) {
            $resourcePath = str_replace(
                "{" . "module" . "}",
                $this->apiClient->getSerializer()->toPathValue($module),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ModulesParameters',
                '/modules/params/{module}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ModulesParameters', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ModulesParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesGetOperationLog
     *
     * Get the operations log list for the export module.  Currently only ftp is available.
     *
     * @param string $type The module name (required)
     * @return \Swagger\Client\Model\Message_Business_SpecificOperation[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetOperationLog($type)
    {
        list($response) = $this->modulesGetOperationLogWithHttpInfo($type);
        return $response;
    }

    /**
     * Operation modulesGetOperationLogWithHttpInfo
     *
     * Get the operations log list for the export module.  Currently only ftp is available.
     *
     * @param string $type The module name (required)
     * @return Array of \Swagger\Client\Model\Message_Business_SpecificOperation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetOperationLogWithHttpInfo($type)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling modulesGetOperationLog');
        }
        // parse inputs
        $resourcePath = "/modules/exportlog/{type}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_SpecificOperation[]',
                '/modules/exportlog/{type}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_SpecificOperation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_SpecificOperation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesGetOperationLogId
     *
     * Get the operation log for the export module.  Currently only ftp is available.
     *
     * @param string $type The module name (required)
     * @param int $id The oepration id (required)
     * @return \Swagger\Client\Model\Message_Business_SpecificOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetOperationLogId($type, $id)
    {
        list($response) = $this->modulesGetOperationLogIdWithHttpInfo($type, $id);
        return $response;
    }

    /**
     * Operation modulesGetOperationLogIdWithHttpInfo
     *
     * Get the operation log for the export module.  Currently only ftp is available.
     *
     * @param string $type The module name (required)
     * @param int $id The oepration id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_SpecificOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesGetOperationLogIdWithHttpInfo($type, $id)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling modulesGetOperationLogId');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesGetOperationLogId');
        }
        // parse inputs
        $resourcePath = "/modules/exportlog/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_SpecificOperation',
                '/modules/exportlog/{type}/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_SpecificOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_SpecificOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesPostModuleNewsLetterOp
     *
     * Create a newsletter operation for the module configured.  Currently only prestashop, magento and woocommerce are available.  The call will return the OperationId if successful
     *
     * @param \Swagger\Client\Model\Message_Business_StandardOperation $operation_otp The operation options (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostModuleNewsLetterOp($operation_otp)
    {
        list($response) = $this->modulesPostModuleNewsLetterOpWithHttpInfo($operation_otp);
        return $response;
    }

    /**
     * Operation modulesPostModuleNewsLetterOpWithHttpInfo
     *
     * Create a newsletter operation for the module configured.  Currently only prestashop, magento and woocommerce are available.  The call will return the OperationId if successful
     *
     * @param \Swagger\Client\Model\Message_Business_StandardOperation $operation_otp The operation options (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostModuleNewsLetterOpWithHttpInfo($operation_otp)
    {
        // verify the required parameter 'operation_otp' is set
        if ($operation_otp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operation_otp when calling modulesPostModuleNewsLetterOp');
        }
        // parse inputs
        $resourcePath = "/modules/newsletterOperation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($operation_otp)) {
            $_tempBody = $operation_otp;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/newsletterOperation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesPostModuleParams
     *
     * Create or update the parameters for a specific module.  Currently only logftp, prestashop, magento and woocommerce are available.
     *
     * @param \Swagger\Client\Model\Message_Business_ModulesParameters $module_params The module parameters (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostModuleParams($module_params)
    {
        list($response) = $this->modulesPostModuleParamsWithHttpInfo($module_params);
        return $response;
    }

    /**
     * Operation modulesPostModuleParamsWithHttpInfo
     *
     * Create or update the parameters for a specific module.  Currently only logftp, prestashop, magento and woocommerce are available.
     *
     * @param \Swagger\Client\Model\Message_Business_ModulesParameters $module_params The module parameters (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostModuleParamsWithHttpInfo($module_params)
    {
        // verify the required parameter 'module_params' is set
        if ($module_params === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module_params when calling modulesPostModuleParams');
        }
        // parse inputs
        $resourcePath = "/modules/params";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($module_params)) {
            $_tempBody = $module_params;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/params'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesPostModuleStandardOp
     *
     * Create a standard operation for the module configured.  Currently only prestashop, magento and woocommerce are available.  The call will return the OperationId if successful
     *
     * @param \Swagger\Client\Model\Message_Business_StandardOperation $operation_otp The operation options (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostModuleStandardOp($operation_otp)
    {
        list($response) = $this->modulesPostModuleStandardOpWithHttpInfo($operation_otp);
        return $response;
    }

    /**
     * Operation modulesPostModuleStandardOpWithHttpInfo
     *
     * Create a standard operation for the module configured.  Currently only prestashop, magento and woocommerce are available.  The call will return the OperationId if successful
     *
     * @param \Swagger\Client\Model\Message_Business_StandardOperation $operation_otp The operation options (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostModuleStandardOpWithHttpInfo($operation_otp)
    {
        // verify the required parameter 'operation_otp' is set
        if ($operation_otp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operation_otp when calling modulesPostModuleStandardOp');
        }
        // parse inputs
        $resourcePath = "/modules/standardOperation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($operation_otp)) {
            $_tempBody = $operation_otp;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/standardOperation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesPostOperationLog
     *
     * Create a specific operation for the export module.  Currently only ftp.  The call will return the OperationId if successful
     *
     * @param string $type name (required)
     * @param \Swagger\Client\Model\Message_Business_SpecificOperation $operation_otp The operation options (required)
     * @return object
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostOperationLog($type, $operation_otp)
    {
        list($response) = $this->modulesPostOperationLogWithHttpInfo($type, $operation_otp);
        return $response;
    }

    /**
     * Operation modulesPostOperationLogWithHttpInfo
     *
     * Create a specific operation for the export module.  Currently only ftp.  The call will return the OperationId if successful
     *
     * @param string $type name (required)
     * @param \Swagger\Client\Model\Message_Business_SpecificOperation $operation_otp The operation options (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPostOperationLogWithHttpInfo($type, $operation_otp)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling modulesPostOperationLog');
        }
        // verify the required parameter 'operation_otp' is set
        if ($operation_otp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operation_otp when calling modulesPostOperationLog');
        }
        // parse inputs
        $resourcePath = "/modules/exportlog/{type}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($operation_otp)) {
            $_tempBody = $operation_otp;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/modules/exportlog/{type}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesPutOperationLog
     *
     * Update a specific operation for the export module.  Currently only ftp.  It will return the number of field that was modified, values that are null or wrong will not be modified.
     *
     * @param string $type name (required)
     * @param int $id operation id (required)
     * @param \Swagger\Client\Model\Message_Business_SpecificOperation $operation_otp The operation options (required)
     * @return object
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPutOperationLog($type, $id, $operation_otp)
    {
        list($response) = $this->modulesPutOperationLogWithHttpInfo($type, $id, $operation_otp);
        return $response;
    }

    /**
     * Operation modulesPutOperationLogWithHttpInfo
     *
     * Update a specific operation for the export module.  Currently only ftp.  It will return the number of field that was modified, values that are null or wrong will not be modified.
     *
     * @param string $type name (required)
     * @param int $id operation id (required)
     * @param \Swagger\Client\Model\Message_Business_SpecificOperation $operation_otp The operation options (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesPutOperationLogWithHttpInfo($type, $id, $operation_otp)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling modulesPutOperationLog');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesPutOperationLog');
        }
        // verify the required parameter 'operation_otp' is set
        if ($operation_otp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operation_otp when calling modulesPutOperationLog');
        }
        // parse inputs
        $resourcePath = "/modules/exportlog/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($operation_otp)) {
            $_tempBody = $operation_otp;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/modules/exportlog/{type}/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesResumeModuleOperation
     *
     * Resume an operation
     *
     * @param int $id Id of the module operation (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesResumeModuleOperation($id)
    {
        list($response) = $this->modulesResumeModuleOperationWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation modulesResumeModuleOperationWithHttpInfo
     *
     * Resume an operation
     *
     * @param int $id Id of the module operation (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesResumeModuleOperationWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesResumeModuleOperation');
        }
        // parse inputs
        $resourcePath = "/modules/resume/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/resume/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modulesSuspendModuleOperation
     *
     * Suspend an operation
     *
     * @param int $id Id of the module operation (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesSuspendModuleOperation($id)
    {
        list($response) = $this->modulesSuspendModuleOperationWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation modulesSuspendModuleOperationWithHttpInfo
     *
     * Suspend an operation
     *
     * @param int $id Id of the module operation (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function modulesSuspendModuleOperationWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling modulesSuspendModuleOperation');
        }
        // parse inputs
        $resourcePath = "/modules/suspend/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/modules/suspend/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
