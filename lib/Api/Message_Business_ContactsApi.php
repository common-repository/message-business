<?php
/**
 * Message_Business_ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Message_Business_Configuration;
use \Swagger\Client\Message_Business_ApiClient;
use \Swagger\Client\Message_Business_ApiException;
use \Swagger\Client\Message_Business_ObjectSerializer;

/**
 * Message_Business_ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_ContactsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\Message_Business_ApiClient instance of the Message_Business_ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\Message_Business_ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\Message_Business_ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new Message_Business_ApiClient();
            $apiClient->getConfig()->setHost('https://services.message-business.com/api/rest/v4');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\Message_Business_ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\Message_Business_ApiClient $apiClient set the API client
     *
     * @return Message_Business_ContactsApi
     */
    public function setApiClient(\Swagger\Client\Message_Business_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation contactsDeleteDelete
     *
     * Delete a purge operation
     *
     * @param int $id The purge operation id (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsDeleteDelete($id)
    {
        list($response) = $this->contactsDeleteDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactsDeleteDeleteWithHttpInfo
     *
     * Delete a purge operation
     *
     * @param int $id The purge operation id (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsDeleteDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsDeleteDelete');
        }
        // parse inputs
        $resourcePath = "/contacts/purge/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contacts/purge/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsDeleteExport
     *
     * Delete an export operation
     *
     * @param int $id The export operation id (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsDeleteExport($id)
    {
        list($response) = $this->contactsDeleteExportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactsDeleteExportWithHttpInfo
     *
     * Delete an export operation
     *
     * @param int $id The export operation id (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsDeleteExportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsDeleteExport');
        }
        // parse inputs
        $resourcePath = "/contacts/export/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contacts/export/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsDeleteImport
     *
     * Delete an import operation details
     *
     * @param int $id The import operation id (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsDeleteImport($id)
    {
        list($response) = $this->contactsDeleteImportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactsDeleteImportWithHttpInfo
     *
     * Delete an import operation details
     *
     * @param int $id The import operation id (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsDeleteImportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsDeleteImport');
        }
        // parse inputs
        $resourcePath = "/contacts/import/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contacts/import/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetDelete
     *
     * Get a purge operation
     *
     * @param int $id The purge operation id (required)
     * @return \Swagger\Client\Model\Message_Business_PurgeOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetDelete($id)
    {
        list($response) = $this->contactsGetDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactsGetDeleteWithHttpInfo
     *
     * Get a purge operation
     *
     * @param int $id The purge operation id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_PurgeOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsGetDelete');
        }
        // parse inputs
        $resourcePath = "/contacts/purge/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_PurgeOperation',
                '/contacts/purge/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_PurgeOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_PurgeOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetDeleteList
     *
     * Get the list of the purge operations
     *
     * @return \Swagger\Client\Model\Message_Business_PurgeOperation[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetDeleteList()
    {
        list($response) = $this->contactsGetDeleteListWithHttpInfo();
        return $response;
    }

    /**
     * Operation contactsGetDeleteListWithHttpInfo
     *
     * Get the list of the purge operations
     *
     * @return Array of \Swagger\Client\Model\Message_Business_PurgeOperation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetDeleteListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts/purge";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_PurgeOperation[]',
                '/contacts/purge'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_PurgeOperation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_PurgeOperation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetExport
     *
     * Get an export operation
     *
     * @param int $id The export operation id (required)
     * @return \Swagger\Client\Model\Message_Business_ExportOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetExport($id)
    {
        list($response) = $this->contactsGetExportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactsGetExportWithHttpInfo
     *
     * Get an export operation
     *
     * @param int $id The export operation id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ExportOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetExportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsGetExport');
        }
        // parse inputs
        $resourcePath = "/contacts/export/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ExportOperation',
                '/contacts/export/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ExportOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ExportOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetExportList
     *
     * Get a list of export operations
     *
     * @return \Swagger\Client\Model\Message_Business_ExportOperation[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetExportList()
    {
        list($response) = $this->contactsGetExportListWithHttpInfo();
        return $response;
    }

    /**
     * Operation contactsGetExportListWithHttpInfo
     *
     * Get a list of export operations
     *
     * @return Array of \Swagger\Client\Model\Message_Business_ExportOperation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetExportListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts/export";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ExportOperation[]',
                '/contacts/export'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ExportOperation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ExportOperation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetFileDelete
     *
     * Dowload the zip of the purge operation
     *
     * @param string $file_name Name of the zip file (required)
     * @return \SplFileObject
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetFileDelete($file_name)
    {
        list($response) = $this->contactsGetFileDeleteWithHttpInfo($file_name);
        return $response;
    }

    /**
     * Operation contactsGetFileDeleteWithHttpInfo
     *
     * Dowload the zip of the purge operation
     *
     * @param string $file_name Name of the zip file (required)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetFileDeleteWithHttpInfo($file_name)
    {
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling contactsGetFileDelete');
        }
        // parse inputs
        $resourcePath = "/contacts/purge/file/{fileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/zip'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/contacts/purge/file/{fileName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetFileExport
     *
     * Dowload the zip of the export operation
     *
     * @param string $file_name Name of the zip file (required)
     * @return \SplFileObject
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetFileExport($file_name)
    {
        list($response) = $this->contactsGetFileExportWithHttpInfo($file_name);
        return $response;
    }

    /**
     * Operation contactsGetFileExportWithHttpInfo
     *
     * Dowload the zip of the export operation
     *
     * @param string $file_name Name of the zip file (required)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetFileExportWithHttpInfo($file_name)
    {
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling contactsGetFileExport');
        }
        // parse inputs
        $resourcePath = "/contacts/export/file/{fileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/zip'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/contacts/export/file/{fileName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetFileImport
     *
     * Dowload the zip of the import operation
     *
     * @param string $file_name Name of the zip file (required)
     * @return \SplFileObject
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetFileImport($file_name)
    {
        list($response) = $this->contactsGetFileImportWithHttpInfo($file_name);
        return $response;
    }

    /**
     * Operation contactsGetFileImportWithHttpInfo
     *
     * Dowload the zip of the import operation
     *
     * @param string $file_name Name of the zip file (required)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetFileImportWithHttpInfo($file_name)
    {
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling contactsGetFileImport');
        }
        // parse inputs
        $resourcePath = "/contacts/import/file/{fileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/zip'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/contacts/import/file/{fileName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetImport
     *
     * Get an import operation
     *
     * @param int $id The import operation id (required)
     * @return \Swagger\Client\Model\Message_Business_ImportOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetImport($id)
    {
        list($response) = $this->contactsGetImportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactsGetImportWithHttpInfo
     *
     * Get an import operation
     *
     * @param int $id The import operation id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ImportOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetImportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactsGetImport');
        }
        // parse inputs
        $resourcePath = "/contacts/import/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ImportOperation',
                '/contacts/import/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ImportOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ImportOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsGetImportList
     *
     * Get a list of import operations
     *
     * @return \Swagger\Client\Model\Message_Business_ImportOperation[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetImportList()
    {
        list($response) = $this->contactsGetImportListWithHttpInfo();
        return $response;
    }

    /**
     * Operation contactsGetImportListWithHttpInfo
     *
     * Get a list of import operations
     *
     * @return Array of \Swagger\Client\Model\Message_Business_ImportOperation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsGetImportListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts/import";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ImportOperation[]',
                '/contacts/import'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ImportOperation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ImportOperation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPostContactsAttributeKey
     *
     * Create or update informations for several contacts (up to 500)
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData[] $contacts_data Contact data (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostContactsAttributeKey($contacts_data)
    {
        list($response) = $this->contactsPostContactsAttributeKeyWithHttpInfo($contacts_data);
        return $response;
    }

    /**
     * Operation contactsPostContactsAttributeKeyWithHttpInfo
     *
     * Create or update informations for several contacts (up to 500)
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData[] $contacts_data Contact data (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostContactsAttributeKeyWithHttpInfo($contacts_data)
    {
        // verify the required parameter 'contacts_data' is set
        if ($contacts_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contacts_data when calling contactsPostContactsAttributeKey');
        }
        // parse inputs
        $resourcePath = "/contacts/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contacts_data)) {
            $_tempBody = $contacts_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contacts/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPostDeleteOperation
     *
     * Create a purge operation
     *
     * @param int $first_line  (required)
     * @param string $first_line_as_header  (required)
     * @param string $encoding  (required)
     * @param string $separator  (required)
     * @param int $key_column  (required)
     * @param \SplFileObject $file  (required)
     * @return \Swagger\Client\Model\Message_Business_PurgeOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostDeleteOperation($first_line, $first_line_as_header, $encoding, $separator, $key_column, $file)
    {
        list($response) = $this->contactsPostDeleteOperationWithHttpInfo($first_line, $first_line_as_header, $encoding, $separator, $key_column, $file);
        return $response;
    }

    /**
     * Operation contactsPostDeleteOperationWithHttpInfo
     *
     * Create a purge operation
     *
     * @param int $first_line  (required)
     * @param string $first_line_as_header  (required)
     * @param string $encoding  (required)
     * @param string $separator  (required)
     * @param int $key_column  (required)
     * @param \SplFileObject $file  (required)
     * @return Array of \Swagger\Client\Model\Message_Business_PurgeOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostDeleteOperationWithHttpInfo($first_line, $first_line_as_header, $encoding, $separator, $key_column, $file)
    {
        // verify the required parameter 'first_line' is set
        if ($first_line === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_line when calling contactsPostDeleteOperation');
        }
        // verify the required parameter 'first_line_as_header' is set
        if ($first_line_as_header === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_line_as_header when calling contactsPostDeleteOperation');
        }
        // verify the required parameter 'encoding' is set
        if ($encoding === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encoding when calling contactsPostDeleteOperation');
        }
        // verify the required parameter 'separator' is set
        if ($separator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $separator when calling contactsPostDeleteOperation');
        }
        // verify the required parameter 'key_column' is set
        if ($key_column === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_column when calling contactsPostDeleteOperation');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling contactsPostDeleteOperation');
        }
        // parse inputs
        $resourcePath = "/contacts/purge/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/form-data'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($first_line !== null) {
            $formParams['firstLine'] = $this->apiClient->getSerializer()->toFormValue($first_line);
        }
        // form params
        if ($first_line_as_header !== null) {
            $formParams['firstLineAsHeader'] = $this->apiClient->getSerializer()->toFormValue($first_line_as_header);
        }
        // form params
        if ($encoding !== null) {
            $formParams['encoding'] = $this->apiClient->getSerializer()->toFormValue($encoding);
        }
        // form params
        if ($separator !== null) {
            $formParams['separator'] = $this->apiClient->getSerializer()->toFormValue($separator);
        }
        // form params
        if ($key_column !== null) {
            $formParams['keyColumn'] = $this->apiClient->getSerializer()->toFormValue($key_column);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_PurgeOperation',
                '/contacts/purge/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_PurgeOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_PurgeOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPostExportOperation
     *
     * Create an export operation
     *
     * @param \Swagger\Client\Model\Message_Business_ContactExportNfo $export_nfo Message_Business_ContactExportNfo model (required)
     * @return \Swagger\Client\Model\Message_Business_ExportOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostExportOperation($export_nfo)
    {
        list($response) = $this->contactsPostExportOperationWithHttpInfo($export_nfo);
        return $response;
    }

    /**
     * Operation contactsPostExportOperationWithHttpInfo
     *
     * Create an export operation
     *
     * @param \Swagger\Client\Model\Message_Business_ContactExportNfo $export_nfo Message_Business_ContactExportNfo model (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ExportOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostExportOperationWithHttpInfo($export_nfo)
    {
        // verify the required parameter 'export_nfo' is set
        if ($export_nfo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $export_nfo when calling contactsPostExportOperation');
        }
        // parse inputs
        $resourcePath = "/contacts/export/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($export_nfo)) {
            $_tempBody = $export_nfo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ExportOperation',
                '/contacts/export/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ExportOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ExportOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPostImportOperation
     *
     * Create an import operation
     *
     * @param string $name  (required)
     * @param int $first_line  (required)
     * @param int $first_line_as_header  (required)
     * @param string $encoding  (required)
     * @param string $separator  (required)
     * @param string $duplicate_option  (required)
     * @param string $matchings  (required)
     * @param \SplFileObject $file  (required)
     * @return \Swagger\Client\Model\Message_Business_ImportOperation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostImportOperation($name, $first_line, $first_line_as_header, $encoding, $separator, $duplicate_option, $matchings, $file)
    {
        list($response) = $this->contactsPostImportOperationWithHttpInfo($name, $first_line, $first_line_as_header, $encoding, $separator, $duplicate_option, $matchings, $file);
        return $response;
    }

    /**
     * Operation contactsPostImportOperationWithHttpInfo
     *
     * Create an import operation
     *
     * @param string $name  (required)
     * @param int $first_line  (required)
     * @param int $first_line_as_header  (required)
     * @param string $encoding  (required)
     * @param string $separator  (required)
     * @param string $duplicate_option  (required)
     * @param string $matchings  (required)
     * @param \SplFileObject $file  (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ImportOperation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPostImportOperationWithHttpInfo($name, $first_line, $first_line_as_header, $encoding, $separator, $duplicate_option, $matchings, $file)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling contactsPostImportOperation');
        }
        // verify the required parameter 'first_line' is set
        if ($first_line === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_line when calling contactsPostImportOperation');
        }
        // verify the required parameter 'first_line_as_header' is set
        if ($first_line_as_header === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_line_as_header when calling contactsPostImportOperation');
        }
        // verify the required parameter 'encoding' is set
        if ($encoding === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encoding when calling contactsPostImportOperation');
        }
        // verify the required parameter 'separator' is set
        if ($separator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $separator when calling contactsPostImportOperation');
        }
        // verify the required parameter 'duplicate_option' is set
        if ($duplicate_option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duplicate_option when calling contactsPostImportOperation');
        }
        // verify the required parameter 'matchings' is set
        if ($matchings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $matchings when calling contactsPostImportOperation');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling contactsPostImportOperation');
        }
        // parse inputs
        $resourcePath = "/contacts/import/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/form-data'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($first_line !== null) {
            $formParams['firstLine'] = $this->apiClient->getSerializer()->toFormValue($first_line);
        }
        // form params
        if ($first_line_as_header !== null) {
            $formParams['firstLineAsHeader'] = $this->apiClient->getSerializer()->toFormValue($first_line_as_header);
        }
        // form params
        if ($encoding !== null) {
            $formParams['encoding'] = $this->apiClient->getSerializer()->toFormValue($encoding);
        }
        // form params
        if ($separator !== null) {
            $formParams['separator'] = $this->apiClient->getSerializer()->toFormValue($separator);
        }
        // form params
        if ($duplicate_option !== null) {
            $formParams['duplicateOption'] = $this->apiClient->getSerializer()->toFormValue($duplicate_option);
        }
        // form params
        if ($matchings !== null) {
            $formParams['matchings'] = $this->apiClient->getSerializer()->toFormValue($matchings);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ImportOperation',
                '/contacts/import/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ImportOperation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ImportOperation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactsPutContactAttributeKey
     *
     * Update informations for several contacts (up to 500)
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData[] $contacts_data Contact data (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPutContactAttributeKey($contacts_data)
    {
        list($response) = $this->contactsPutContactAttributeKeyWithHttpInfo($contacts_data);
        return $response;
    }

    /**
     * Operation contactsPutContactAttributeKeyWithHttpInfo
     *
     * Update informations for several contacts (up to 500)
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData[] $contacts_data Contact data (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactsPutContactAttributeKeyWithHttpInfo($contacts_data)
    {
        // verify the required parameter 'contacts_data' is set
        if ($contacts_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contacts_data when calling contactsPutContactAttributeKey');
        }
        // parse inputs
        $resourcePath = "/contacts/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contacts_data)) {
            $_tempBody = $contacts_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contacts/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
