<?php
/**
 * Message_Business_ContactApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Message_Business_Configuration;
use \Swagger\Client\Message_Business_ApiClient;
use \Swagger\Client\Message_Business_ApiException;
use \Swagger\Client\Message_Business_ObjectSerializer;

/**
 * Message_Business_ContactApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_ContactApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\Message_Business_ApiClient instance of the Message_Business_ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\Message_Business_ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\Message_Business_ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new Message_Business_ApiClient();
            $apiClient->getConfig()->setHost('https://services.message-business.com/api/rest/v4');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\Message_Business_ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\Message_Business_ApiClient $apiClient set the API client
     *
     * @return Message_Business_ContactApi
     */
    public function setApiClient(\Swagger\Client\Message_Business_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation contactDeleteContactById
     *
     * Delete a contact
     *
     * @param int $id  (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactDeleteContactById($id)
    {
        list($response) = $this->contactDeleteContactByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactDeleteContactByIdWithHttpInfo
     *
     * Delete a contact
     *
     * @param int $id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactDeleteContactByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactDeleteContactById');
        }
        // parse inputs
        $resourcePath = "/contact/attributebycid/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contact/attributebycid/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactDeleteContactByKey
     *
     * Delete a contact
     *
     * @param string $contact_key  (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactDeleteContactByKey($contact_key)
    {
        list($response) = $this->contactDeleteContactByKeyWithHttpInfo($contact_key);
        return $response;
    }

    /**
     * Operation contactDeleteContactByKeyWithHttpInfo
     *
     * Delete a contact
     *
     * @param string $contact_key  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactDeleteContactByKeyWithHttpInfo($contact_key)
    {
        // verify the required parameter 'contact_key' is set
        if ($contact_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_key when calling contactDeleteContactByKey');
        }
        // parse inputs
        $resourcePath = "/contact/attribute/{contactKey}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_key !== null) {
            $resourcePath = str_replace(
                "{" . "contactKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contact/attribute/{contactKey}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactGetContacHistory
     *
     * Get the log list of a contact
     *
     * @param string $contact_key  (required)
     * @param int $size  (required)
     * @return \Swagger\Client\Model\Message_Business_ContactHistory
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContacHistory($contact_key, $size)
    {
        list($response) = $this->contactGetContacHistoryWithHttpInfo($contact_key, $size);
        return $response;
    }

    /**
     * Operation contactGetContacHistoryWithHttpInfo
     *
     * Get the log list of a contact
     *
     * @param string $contact_key  (required)
     * @param int $size  (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactHistory, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContacHistoryWithHttpInfo($contact_key, $size)
    {
        // verify the required parameter 'contact_key' is set
        if ($contact_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_key when calling contactGetContacHistory');
        }
        // verify the required parameter 'size' is set
        if ($size === null) {
            throw new \InvalidArgumentException('Missing the required parameter $size when calling contactGetContacHistory');
        }
        // parse inputs
        $resourcePath = "/contact/history/{contactKey}/{size}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_key !== null) {
            $resourcePath = str_replace(
                "{" . "contactKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_key),
                $resourcePath
            );
        }
        // path params
        if ($size !== null) {
            $resourcePath = str_replace(
                "{" . "size" . "}",
                $this->apiClient->getSerializer()->toPathValue($size),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactHistory',
                '/contact/history/{contactKey}/{size}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactHistory', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactHistory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactGetContactAttributeId
     *
     * Get the list of informations for the contact unique id
     *
     * @param int $id contact id (required)
     * @return \Swagger\Client\Model\Message_Business_ContactData[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeId($id)
    {
        list($response) = $this->contactGetContactAttributeIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactGetContactAttributeIdWithHttpInfo
     *
     * Get the list of informations for the contact unique id
     *
     * @param int $id contact id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactData[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactGetContactAttributeId');
        }
        // parse inputs
        $resourcePath = "/contact/attributebycid/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactData[]',
                '/contact/attributebycid/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactData[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ModelMessage_Business_ContactData[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactGetContactAttributeIdKey
     *
     * Get a specific information for the contact key
     *
     * @param string $contact_key Unique key field (required)
     * @return \Swagger\Client\Model\Message_Business_ContactData[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeIdKey($contact_key)
    {
        list($response) = $this->contactGetContactAttributeIdKeyWithHttpInfo($contact_key);
        return $response;
    }

    /**
     * Operation contactGetContactAttributeIdKeyWithHttpInfo
     *
     * Get a specific information for the contact key
     *
     * @param string $contact_key Unique key field (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactData[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeIdKeyWithHttpInfo($contact_key)
    {
        // verify the required parameter 'contact_key' is set
        if ($contact_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_key when calling contactGetContactAttributeIdKey');
        }
        // parse inputs
        $resourcePath = "/contact/attributevalueid/{contactKey}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_key !== null) {
            $resourcePath = str_replace(
                "{" . "contactKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactData[]',
                '/contact/attributevalueid/{contactKey}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactData[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactData[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactGetContactAttributeIdbyId
     *
     * Get a specific information for the contact id
     *
     * @param int $id contact id (required)
     * @return \Swagger\Client\Model\Message_Business_ContactData[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeIdbyId($id)
    {
        list($response) = $this->contactGetContactAttributeIdbyIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation contactGetContactAttributeIdbyIdWithHttpInfo
     *
     * Get a specific information for the contact id
     *
     * @param int $id contact id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactData[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeIdbyIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contactGetContactAttributeIdbyId');
        }
        // parse inputs
        $resourcePath = "/contact/attributevalueidbycid/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactData[]',
                '/contact/attributevalueidbycid/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactData[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactData[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactGetContactAttributeKey
     *
     * Get the list of informations for the contact unique key
     *
     * @param string $contact_key Unique key field (required)
     * @return \Swagger\Client\Model\Message_Business_ContactData[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeKey($contact_key)
    {
        list($response) = $this->contactGetContactAttributeKeyWithHttpInfo($contact_key);
        return $response;
    }

    /**
     * Operation contactGetContactAttributeKeyWithHttpInfo
     *
     * Get the list of informations for the contact unique key
     *
     * @param string $contact_key Unique key field (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactData[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactGetContactAttributeKeyWithHttpInfo($contact_key)
    {
        // verify the required parameter 'contact_key' is set
        if ($contact_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_key when calling contactGetContactAttributeKey');
        }
        // parse inputs
        $resourcePath = "/contact/attribute/{contactKey}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($contact_key !== null) {
            $resourcePath = str_replace(
                "{" . "contactKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactData[]',
                '/contact/attribute/{contactKey}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactData[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactData[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactPostContacHistory
     *
     * Create a new log for a contact
     *
     * @param \Swagger\Client\Model\Message_Business_ContactHistory $contact_history Message_Business_ContactHistory model (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactPostContacHistory($contact_history)
    {
        list($response) = $this->contactPostContacHistoryWithHttpInfo($contact_history);
        return $response;
    }

    /**
     * Operation contactPostContacHistoryWithHttpInfo
     *
     * Create a new log for a contact
     *
     * @param \Swagger\Client\Model\Message_Business_ContactHistory $contact_history Message_Business_ContactHistory model (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactPostContacHistoryWithHttpInfo($contact_history)
    {
        // verify the required parameter 'contact_history' is set
        if ($contact_history === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_history when calling contactPostContacHistory');
        }
        // parse inputs
        $resourcePath = "/contact/history";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_history)) {
            $_tempBody = $contact_history;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contact/history'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactPostContactAttributeKey
     *
     * Create or update informations for a contact
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData $contact_data Contact data (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactPostContactAttributeKey($contact_data)
    {
        list($response) = $this->contactPostContactAttributeKeyWithHttpInfo($contact_data);
        return $response;
    }

    /**
     * Operation contactPostContactAttributeKeyWithHttpInfo
     *
     * Create or update informations for a contact
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData $contact_data Contact data (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactPostContactAttributeKeyWithHttpInfo($contact_data)
    {
        // verify the required parameter 'contact_data' is set
        if ($contact_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_data when calling contactPostContactAttributeKey');
        }
        // parse inputs
        $resourcePath = "/contact/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_data)) {
            $_tempBody = $contact_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contact/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contactPutContactAttributeKey
     *
     * Update informations for a contact
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData $contact_data Contact data (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactPutContactAttributeKey($contact_data)
    {
        list($response) = $this->contactPutContactAttributeKeyWithHttpInfo($contact_data);
        return $response;
    }

    /**
     * Operation contactPutContactAttributeKeyWithHttpInfo
     *
     * Update informations for a contact
     *
     * @param \Swagger\Client\Model\Message_Business_ContactData $contact_data Contact data (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function contactPutContactAttributeKeyWithHttpInfo($contact_data)
    {
        // verify the required parameter 'contact_data' is set
        if ($contact_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_data when calling contactPutContactAttributeKey');
        }
        // parse inputs
        $resourcePath = "/contact/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_data)) {
            $_tempBody = $contact_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/contact/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
