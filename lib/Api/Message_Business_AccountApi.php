<?php
/**
 * Message_Business_AccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Message Business API
 *
 * REST API allowing you to interact with your message business account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Message_Business_Configuration;
use \Swagger\Client\Message_Business_ApiClient;
use \Swagger\Client\Message_Business_ApiException;
use \Swagger\Client\Message_Business_ObjectSerializer;

/**
 * Message_Business_AccountApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Message_Business_AccountApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\Message_Business_ApiClient instance of the Message_Business_ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\Message_Business_ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\Message_Business_ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new Message_Business_ApiClient();
            $apiClient->getConfig()->setHost('https://services.message-business.com/api/rest/v4');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\Message_Business_ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\Message_Business_ApiClient $apiClient set the API client
     *
     * @return Message_Business_AccountApi
     */
    public function setApiClient(\Swagger\Client\Message_Business_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation accountDeleteContactAttribute
     *
     * Delete a contact field
     *
     * @param int $id contact field id (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountDeleteContactAttribute($id)
    {
        list($response) = $this->accountDeleteContactAttributeWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation accountDeleteContactAttributeWithHttpInfo
     *
     * Delete a contact field
     *
     * @param int $id contact field id (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountDeleteContactAttributeWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountDeleteContactAttribute');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/account/contactattribute/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountDeleteContactAttributeValue
     *
     * Delete the attribute field value
     *
     * @param int $id The field value id (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountDeleteContactAttributeValue($id)
    {
        list($response) = $this->accountDeleteContactAttributeValueWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation accountDeleteContactAttributeValueWithHttpInfo
     *
     * Delete the attribute field value
     *
     * @param int $id The field value id (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountDeleteContactAttributeValueWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountDeleteContactAttributeValue');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute/value/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/account/contactattribute/value/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountGetAccountCredits
     *
     * Get credits left  You can choose between transactional, sms or marketing
     *
     * @param string $type_name type of credit (transactional, sms, marketing) (required)
     * @return \Swagger\Client\Model\Message_Business_CreditsInformation
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAccountCredits($type_name)
    {
        list($response) = $this->accountGetAccountCreditsWithHttpInfo($type_name);
        return $response;
    }

    /**
     * Operation accountGetAccountCreditsWithHttpInfo
     *
     * Get credits left  You can choose between transactional, sms or marketing
     *
     * @param string $type_name type of credit (transactional, sms, marketing) (required)
     * @return Array of \Swagger\Client\Model\Message_Business_CreditsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAccountCreditsWithHttpInfo($type_name)
    {
        // verify the required parameter 'type_name' is set
        if ($type_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type_name when calling accountGetAccountCredits');
        }
        // parse inputs
        $resourcePath = "/account/remainingcredits/{type_name}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($type_name !== null) {
            $resourcePath = str_replace(
                "{" . "type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($type_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_CreditsInformation',
                '/account/remainingcredits/{type_name}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_CreditsInformation', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_CreditsInformation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountGetAccountSettings
     *
     * Get an account attribute field
     *
     * @param string $setting setting name (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAccountSettings($setting)
    {
        list($response) = $this->accountGetAccountSettingsWithHttpInfo($setting);
        return $response;
    }

    /**
     * Operation accountGetAccountSettingsWithHttpInfo
     *
     * Get an account attribute field
     *
     * @param string $setting setting name (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAccountSettingsWithHttpInfo($setting)
    {
        // verify the required parameter 'setting' is set
        if ($setting === null) {
            throw new \InvalidArgumentException('Missing the required parameter $setting when calling accountGetAccountSettings');
        }
        // parse inputs
        $resourcePath = "/account/settingsattribute/{setting}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($setting !== null) {
            $resourcePath = str_replace(
                "{" . "setting" . "}",
                $this->apiClient->getSerializer()->toPathValue($setting),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/account/settingsattribute/{setting}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountGetAllContactAttribute
     *
     * Get a list of contact fields
     *
     * @return \Swagger\Client\Model\Message_Business_ContactField[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAllContactAttribute()
    {
        list($response) = $this->accountGetAllContactAttributeWithHttpInfo();
        return $response;
    }

    /**
     * Operation accountGetAllContactAttributeWithHttpInfo
     *
     * Get a list of contact fields
     *
     * @return Array of \Swagger\Client\Model\Message_Business_ContactField[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAllContactAttributeWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/account/contactattribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactField[]',
                '/account/contactattribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactField[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactField[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountGetAllContactAttributeValues
     *
     * Get the values of a specific field
     *
     * @param int $id contact field id (required)
     * @return \Swagger\Client\Model\Message_Business_ContactFieldValue[]
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAllContactAttributeValues($id)
    {
        list($response) = $this->accountGetAllContactAttributeValuesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation accountGetAllContactAttributeValuesWithHttpInfo
     *
     * Get the values of a specific field
     *
     * @param int $id contact field id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactFieldValue[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetAllContactAttributeValuesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountGetAllContactAttributeValues');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute/value/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactFieldValue[]',
                '/account/contactattribute/value/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactFieldValue[]', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactFieldValue[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountGetContactAttribute
     *
     * Get a contact field
     *
     * @param int $id contact field Id (required)
     * @return \Swagger\Client\Model\Message_Business_ContactField
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetContactAttribute($id)
    {
        list($response) = $this->accountGetContactAttributeWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation accountGetContactAttributeWithHttpInfo
     *
     * Get a contact field
     *
     * @param int $id contact field Id (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactField, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountGetContactAttributeWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountGetContactAttribute');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactField',
                '/account/contactattribute/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactField', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactField', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountPostAccountSettings
     *
     * Update an account attributes fields
     *
     * @param \Swagger\Client\Model\Message_Business_SettingsInformation $account_nfo Message_Business_SettingsInformation model (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPostAccountSettings($account_nfo)
    {
        list($response) = $this->accountPostAccountSettingsWithHttpInfo($account_nfo);
        return $response;
    }

    /**
     * Operation accountPostAccountSettingsWithHttpInfo
     *
     * Update an account attributes fields
     *
     * @param \Swagger\Client\Model\Message_Business_SettingsInformation $account_nfo Message_Business_SettingsInformation model (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPostAccountSettingsWithHttpInfo($account_nfo)
    {
        // verify the required parameter 'account_nfo' is set
        if ($account_nfo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_nfo when calling accountPostAccountSettings');
        }
        // parse inputs
        $resourcePath = "/account/settingsattribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($account_nfo)) {
            $_tempBody = $account_nfo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/account/settingsattribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountPostContactAttribute
     *
     * Add a new contact field
     *
     * @param \Swagger\Client\Model\Message_Business_ContactField $contact_field Message_Business_ContactField Model (required)
     * @return \Swagger\Client\Model\Message_Business_ContactField
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPostContactAttribute($contact_field)
    {
        list($response) = $this->accountPostContactAttributeWithHttpInfo($contact_field);
        return $response;
    }

    /**
     * Operation accountPostContactAttributeWithHttpInfo
     *
     * Add a new contact field
     *
     * @param \Swagger\Client\Model\Message_Business_ContactField $contact_field Message_Business_ContactField Model (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactField, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPostContactAttributeWithHttpInfo($contact_field)
    {
        // verify the required parameter 'contact_field' is set
        if ($contact_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_field when calling accountPostContactAttribute');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_field)) {
            $_tempBody = $contact_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactField',
                '/account/contactattribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactField', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactField', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountPostContactAttributeValue
     *
     * Add a new field value for the specified field (single or multiple selection only)
     *
     * @param int $id The field id (required)
     * @param \Swagger\Client\Model\Message_Business_ContactFieldValue $contact_field_value Message_Business_ContactFieldValue model (required)
     * @return \Swagger\Client\Model\Message_Business_ContactFieldValue
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPostContactAttributeValue($id, $contact_field_value)
    {
        list($response) = $this->accountPostContactAttributeValueWithHttpInfo($id, $contact_field_value);
        return $response;
    }

    /**
     * Operation accountPostContactAttributeValueWithHttpInfo
     *
     * Add a new field value for the specified field (single or multiple selection only)
     *
     * @param int $id The field id (required)
     * @param \Swagger\Client\Model\Message_Business_ContactFieldValue $contact_field_value Message_Business_ContactFieldValue model (required)
     * @return Array of \Swagger\Client\Model\Message_Business_ContactFieldValue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPostContactAttributeValueWithHttpInfo($id, $contact_field_value)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountPostContactAttributeValue');
        }
        // verify the required parameter 'contact_field_value' is set
        if ($contact_field_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_field_value when calling accountPostContactAttributeValue');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute/value/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_field_value)) {
            $_tempBody = $contact_field_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Message_Business_ContactFieldValue',
                '/account/contactattribute/value/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Message_Business_ContactFieldValue', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message_Business_ContactFieldValue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountPutContactAttribute
     *
     * Update a contact field name
     *
     * @param \Swagger\Client\Model\Message_Business_ContactField $contact_field Message_Business_ContactField Model (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPutContactAttribute($contact_field)
    {
        list($response) = $this->accountPutContactAttributeWithHttpInfo($contact_field);
        return $response;
    }

    /**
     * Operation accountPutContactAttributeWithHttpInfo
     *
     * Update a contact field name
     *
     * @param \Swagger\Client\Model\Message_Business_ContactField $contact_field Message_Business_ContactField Model (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPutContactAttributeWithHttpInfo($contact_field)
    {
        // verify the required parameter 'contact_field' is set
        if ($contact_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_field when calling accountPutContactAttribute');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_field)) {
            $_tempBody = $contact_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/account/contactattribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation accountPutContactAttributeValue
     *
     * Update the field value by changing name and/or index.
     *
     * @param \Swagger\Client\Model\Message_Business_ContactFieldValue $contact_field_value Message_Business_ContactFieldValue model (required)
     * @return string
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPutContactAttributeValue($contact_field_value)
    {
        list($response) = $this->accountPutContactAttributeValueWithHttpInfo($contact_field_value);
        return $response;
    }

    /**
     * Operation accountPutContactAttributeValueWithHttpInfo
     *
     * Update the field value by changing name and/or index.
     *
     * @param \Swagger\Client\Model\Message_Business_ContactFieldValue $contact_field_value Message_Business_ContactFieldValue model (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\Message_Business_ApiException on non-2xx response
     */
    public function accountPutContactAttributeValueWithHttpInfo($contact_field_value)
    {
        // verify the required parameter 'contact_field_value' is set
        if ($contact_field_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_field_value when calling accountPutContactAttributeValue');
        }
        // parse inputs
        $resourcePath = "/account/contactattribute/value";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contact_field_value)) {
            $_tempBody = $contact_field_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/account/contactattribute/value'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (Message_Business_ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
